plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.0'
    id 'io.spring.dependency-management' version '1.1.5'
}

group = 'com.backend'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven {url 'https://jitpack.io'}
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.projectlombok:lombok'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.1'

    // JWT
    compileOnly group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
    runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
    // JWT test
    testImplementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    testRuntimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    testRuntimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    testImplementation 'org.mockito:mockito-core:4.0.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:4.0.0'

    // Gson
    implementation 'com.google.code.gson:gson'

    //validation
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    //s3
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    //Querydsl 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    implementation 'com.github.iamport:iamport-rest-client-java:0.2.23'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'
    // Mongodb
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

    // Websocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // kafka
    implementation 'org.springframework.kafka:spring-kafka'
    testImplementation 'org.springframework.kafka:spring-kafka-test'

    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'

    // web push dependency
    implementation 'nl.martijndwars:web-push:5.1.1'
    implementation 'org.bouncycastle:bcprov-jdk18on:1.76'
    implementation 'org.bouncycastle:bcpkix-jdk18on:1.76'

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'
}

tasks.named('test') {
    useJUnitPlatform()
}

//// QueryDSL 설정 추가
//sourceSets {
//    main {
//        java {
//            srcDirs += 'src/main/generated'
//        }
//    }
//}
//
//tasks.withType(JavaCompile) {
//    options.annotationProcessorGeneratedSourcesDirectory = file("src/main/generated")
//}

clean {
    delete file('src/main/generated')
}